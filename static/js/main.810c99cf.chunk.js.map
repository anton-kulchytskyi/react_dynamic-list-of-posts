{"version":3,"sources":["components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","api/posts.ts","components/PostDetails/PostDetails.tsx","components/UserSelect/UserSelect.tsx","App.tsx","api/users.ts","index.tsx"],"names":["Loader","className","PostsList","React","memo","posts","selectedPostId","load","loadPost","changePostId","toggleShowDetailsHandler","length","map","post","userId","body","type","onClick","id","request","url","option","fetch","then","res","ok","Error","status","statusText","json","NewCommentForm","changeReload","useState","name","email","form","setForm","formValid","setFormValid","emailValidation","handleChange","e","target","value","prevState","stateReset","useEffect","formValidation","useMemo","test","toPostComment","a","postId","method","JSON","stringify","headers","onSubmit","event","preventDefault","placeholder","onChange","getPostDetails","PostDetails","toggleDetails","comments","setComments","setPost","showCommets","setShowCommets","reload","setReload","useCallback","Promise","all","postComment","postDetails","comment","UserSelect","users","selectedUserId","changeUser","setLoadPost","user","App","setPosts","setUsers","setSelectedPostId","setSelectedUserId","setToggleDetails","fetchUsers","allUsers","fetchUserPosts","userPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.810c99cf.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  selectedPostId: number;\n  loadPost: boolean;\n  changePostId: (post: Post, id: number) => void;\n  toggleShowDetailsHandler: (value: boolean) => void;\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  posts,\n  selectedPostId,\n  loadPost: load,\n  changePostId,\n  toggleShowDetailsHandler,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <>\n        {posts.length > 0 ? (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li\n                key={post.id}\n                className=\"PostsList__item\"\n              >\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.body}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    changePostId(post, post.id);\n                    toggleShowDetailsHandler(true);\n                  }}\n                >\n                  {selectedPostId === post.id ? 'Closed' : 'Open'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <>\n            {load ? <Loader /> : <h3>User has no posts</h3>}\n          </>\n        )}\n      </>\n    </div>\n  );\n});\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, option?: RequestInit | undefined) => {\n  return fetch(`${BASE_URL}${url}`, option)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport './NewCommentForm.scss';\nimport { postComment } from '../../api/comments';\n\ntype Props = {\n  selectedPostId: number;\n  changeReload: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo((\n  { selectedPostId, changeReload },\n) => {\n  const [form, setForm] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [formValid, setFormValid] = useState(true);\n\n  /* eslint-disable max-len */\n  /* eslint-disable no-useless-escape */\n  const emailValidation\n  = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n\n    setForm(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n    setFormValid(true);\n  };\n\n  const stateReset = () => {\n    setForm({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  useEffect(() => {\n    stateReset();\n  }, [selectedPostId]);\n\n  const formValidation = useMemo(() => {\n    return (\n      form.name.length > 0\n      && emailValidation.test(form.email)\n      && form.body.length > 0);\n  }, [form.name, form.email, form.body]);\n\n  const toPostComment = async () => {\n    await postComment(selectedPostId, form.name, form.email, form.body);\n    changeReload();\n    stateReset();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        if (formValidation) {\n          toPostComment();\n        } else {\n          setFormValid(false);\n        }\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={form.name}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={form.email}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input NewCommentForm__input--textarea\"\n          value={form.body}\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n\n      {!formValid && (\n        <p className=\"NewCommentForm__warning-message\">\n          Enter valid data!\n        </p>\n      )}\n    </form>\n  );\n});\n","import { request } from './api';\n\nexport const getComments = (postId: number) => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (id: number) => {\n  return request(`/comments/${id}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const postComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => {\n  return request('/comments', {\n    method: 'POST',\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n","import { request } from './api';\n\nexport const getUserPosts = (userId?: number) => {\n  return (\n    userId ? request(`/posts?userId=${userId}`) : request('/posts')\n  );\n};\n\nexport const getPostDetails = (postId: number) => {\n  return request(`/posts/${postId}`);\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { getComments, deleteComment } from '../../api/comments';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedPostId: number;\n  toggleDetails: boolean;\n  toggleShowDetailsHandler: (value: boolean) => void;\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  selectedPostId,\n  toggleDetails,\n  toggleShowDetailsHandler,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [post, setPost] = useState<Post>();\n  const [showCommets, setShowCommets] = useState(false);\n  const [reload, setReload] = useState(false);\n\n  const changeReload = () => {\n    setReload(prevState => !prevState);\n  };\n\n  const visibleComments = () => {\n    setShowCommets(prevState => !prevState);\n  };\n\n  const fetch = useCallback(async () => {\n    const [postComment, postDetails] = await Promise.all([\n      getComments(selectedPostId), getPostDetails(selectedPostId),\n    ]);\n\n    setComments(postComment);\n    setPost(postDetails);\n    toggleShowDetailsHandler(false);\n  }, []);\n\n  useEffect(() => {\n    fetch();\n  }, [selectedPostId, reload, toggleDetails]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {toggleDetails\n        ? <Loader />\n        : (\n          <>\n            <section className=\"PostDetails__post\">\n              <p>{post?.body}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {comments.length > 0\n                ? (\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={visibleComments}\n                  >\n                    {\n                      `${showCommets ? 'Show' : 'Hide'}\n                    ${comments.length}\n                    ${comments.length > 1 ? 'comments' : 'comment'}`\n                    }\n                  </button>\n                )\n                : (\n                  <p className=\"PostDetails__comments--no-comments\">\n                    So far, no comments...\n                  </p>\n                )}\n\n              {!showCommets && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map((comment) => (\n                    <li\n                      key={comment.id}\n                      className=\"PostDetails__list-item\"\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={async () => {\n                          await deleteComment(comment.id);\n                          changeReload();\n                        }}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </section>\n          </>\n        )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            changeReload={changeReload}\n          />\n        </div>\n      </section>\n    </div>\n  );\n});\n","import React from 'react';\n\ntype Props = {\n  users: User[];\n  selectedUserId: number;\n  changeUser: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  setLoadPost: (value: boolean) => void;\n};\n\nexport const UserSelect: React.FC<Props> = React.memo(({\n  users,\n  selectedUserId,\n  changeUser,\n  setLoadPost,\n}) => {\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        value={selectedUserId}\n        onChange={(event) => {\n          changeUser(event);\n          setLoadPost(true);\n        }}\n      >\n        <option value=\"0\">All users</option>\n        {users.map(user => (\n          <option\n            key={user.id}\n            value={user.id}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n});\n","import React, { useState, useEffect, useCallback } from 'react';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\nimport { getUsers } from './api/users';\nimport { getUserPosts } from './api/posts';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [loadPost, setLoadPost] = useState(true);\n  const [toggleDetails, setToggleDetails] = useState(false);\n\n  const toggleShowDetailsHandler = (value: boolean) => {\n    setToggleDetails(value);\n  };\n\n  const fetchUsers = useCallback(async () => {\n    const allUsers = await getUsers();\n\n    setUsers(allUsers);\n    setLoadPost(false);\n  }, []);\n\n  const fetchUserPosts = useCallback(async () => {\n    const userPosts = await getUserPosts(selectedUserId);\n\n    setPosts(userPosts);\n    setLoadPost(false);\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  useEffect(() => {\n    fetchUserPosts();\n  }, [selectedUserId]);\n\n  const changeUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const changePostId = (post: Post, id: number) => {\n    setSelectedPostId(selectedPostId === post.id ? 0 : id);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          users={users}\n          selectedUserId={selectedUserId}\n          changeUser={changeUser}\n          setLoadPost={setLoadPost}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            changePostId={changePostId}\n            loadPost={loadPost}\n            toggleShowDetailsHandler={toggleShowDetailsHandler}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0\n            && (\n              <PostDetails\n                selectedPostId={selectedPostId}\n                toggleDetails={toggleDetails}\n                toggleShowDetailsHandler={toggleShowDetailsHandler}\n              />\n            )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => {\n  return request('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}