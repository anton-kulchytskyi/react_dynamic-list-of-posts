{"version":3,"sources":["components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","api/posts.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["Loader","className","PostsList","React","memo","posts","postId","load","loadPost","changePostId","toggleCommentsChahgeHandler","length","map","post","userId","body","type","onClick","id","request","url","option","fetch","then","res","ok","Error","status","statusText","json","getComments","NewCommentForm","changeReload","useState","name","email","form","setForm","formValid","setFormValid","emailValidation","handleChange","e","target","value","prevState","stateReset","useEffect","formValidation","useMemo","test","toPostComment","method","JSON","stringify","headers","postComment","onSubmit","event","preventDefault","placeholder","onChange","getPostDetails","PostDetails","toggleComments","comments","setComments","setPost","showCommets","setShowCommets","reload","setReload","curr","Promise","all","comment","App","setPosts","users","setUsers","setPostId","setUserId","setLoadPost","setToggleComments","getUserPosts","changeUser","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d45e0825.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  postId: number;\n  loadPost: boolean;\n  changePostId: (post: Post, id: number) => void;\n  toggleCommentsChahgeHandler: (value: boolean) => void;\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  posts,\n  postId,\n  loadPost: load,\n  changePostId,\n  toggleCommentsChahgeHandler,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <>\n        {posts.length > 0 ? (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li\n                key={post.id}\n                className=\"PostsList__item\"\n              >\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.body}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    changePostId(post, post.id);\n                    toggleCommentsChahgeHandler(true);\n                  }}\n                >\n                  {postId === post.id ? 'Closed' : 'Open'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <>\n            {load ? <Loader /> : <h3>User has no posts</h3>}\n          </>\n        )}\n      </>\n    </div>\n  );\n});\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, option?: RequestInit | undefined) => {\n  return fetch(`${BASE_URL}${url}`, option)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n","import { request } from './api';\n\nexport const getComments = (postId: number) => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (id: number) => {\n  return request(`/comments/${id}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const postComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => {\n  return request('/comments', {\n    method: 'POST',\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport './NewCommentForm.scss';\nimport { postComment } from '../../api/comments';\n\ntype Props = {\n  postId: number;\n  changeReload: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo((\n  { postId, changeReload },\n) => {\n  const [form, setForm] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [formValid, setFormValid] = useState(true);\n\n  /* eslint-disable max-len */\n  /* eslint-disable no-useless-escape */\n  const emailValidation\n  = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n\n    setForm(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n    setFormValid(true);\n  };\n\n  const stateReset = () => {\n    setForm({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  useEffect(() => {\n    stateReset();\n  }, [postId]);\n\n  const formValidation = useMemo(() => {\n    return (\n      form.name.length > 0\n      && emailValidation.test(form.email)\n      && form.body.length > 0);\n  }, [form.name, form.email, form.body]);\n\n  const toPostComment = () => {\n    postComment(postId, form.name, form.email, form.body)\n      .then(() => (changeReload()));\n    stateReset();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        if (formValidation) {\n          toPostComment();\n        } else {\n          setFormValid(false);\n        }\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={form.name}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={form.email}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input NewCommentForm__input--textarea\"\n          value={form.body}\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n\n      {!formValid && (\n        <p className=\"NewCommentForm__warning-message\">\n          Enter valid data!\n        </p>\n      )}\n    </form>\n  );\n});\n","import { request } from './api';\n\nexport const getUserPosts = (userId?: number) => {\n  return (\n    userId ? request(`/posts?userId=${userId}`) : request('/posts')\n  );\n};\n\nexport const getPostDetails = (postId: number) => {\n  return request(`/posts/${postId}`);\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { getComments, deleteComment } from '../../api/comments';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  postId: number;\n  toggleComments: boolean;\n  toggleCommentsChahgeHandler: (value: boolean) => void;\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  postId,\n  toggleComments,\n  toggleCommentsChahgeHandler,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [post, setPost] = useState<Post>();\n  const [showCommets, setShowCommets] = useState(false);\n  const [reload, setReload] = useState(false);\n\n  const changeReload = () => {\n    setReload(curr => !curr);\n  };\n\n  useEffect(() => {\n    Promise.all([\n      getComments(postId).then(setComments),\n      getPostDetails(postId).then(setPost),\n    ]).then(() => {\n      toggleCommentsChahgeHandler(false);\n    });\n  }, [postId, reload, toggleComments]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {toggleComments\n        ? <Loader />\n        : (\n          <>\n            <section className=\"PostDetails__post\">\n              <p>{post?.body}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {comments.length > 0 && (\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => setShowCommets(curr => !curr)}\n                >\n                  {\n                    `${showCommets ? 'Show' : 'Hide'}\n                  ${comments.length}\n                  ${comments.length > 1 ? 'comments' : 'comment'}`\n                  }\n                </button>\n              )}\n\n              {!showCommets && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map((comment) => (\n                    <li\n                      key={comment.id}\n                      className=\"PostDetails__list-item\"\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => {\n                          deleteComment(comment.id)\n                            .then(() => {\n                              changeReload();\n                            });\n                        }}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </section>\n          </>\n        )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            changeReload={changeReload}\n          />\n        </div>\n      </section>\n    </div>\n  );\n});\n","import React, { useState, useEffect } from 'react';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\nimport { getUserPosts } from './api/posts';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [postId, setPostId] = useState(0);\n  const [userId, setUserId] = useState(0);\n  const [loadPost, setLoadPost] = useState(true);\n  const [toggleComments, setToggleComments] = useState(false);\n\n  const toggleCommentsChahgeHandler = (value: boolean) => {\n    setToggleComments(value);\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .then(() => {\n        setLoadPost(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    getUserPosts(userId)\n      .then(setPosts)\n      .then(() => {\n        setLoadPost(false);\n      });\n  }, [userId]);\n\n  const changeUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n  };\n\n  const changePostId = (post: Post, id: number) => {\n    setPostId(postId === post.id ? 0 : id);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={(event) => {\n              changeUser(event);\n              setLoadPost(true);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            postId={postId}\n            changePostId={changePostId}\n            loadPost={loadPost}\n            toggleCommentsChahgeHandler={toggleCommentsChahgeHandler}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {postId !== 0\n            && (\n              <PostDetails\n                postId={postId}\n                toggleComments={toggleComments}\n                toggleCommentsChahgeHandler={toggleCommentsChahgeHandler}\n              />\n            )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => {\n  return request('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}